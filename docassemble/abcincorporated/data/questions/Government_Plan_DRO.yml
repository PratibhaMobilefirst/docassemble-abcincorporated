metadata: 
  title: |
    Government Plan DRO
  short title: |
    Thanks
  show login: True
  allow registration: False
  exit url: "http://lexyalgo.com/"
  exit link: logout
  exit label: |
    Exit
  navigation bar html: |
    <li class="nav-item">
      <a class="nav-link home" href="https://doc.lexyalgo.com/interview?i=docassemble.playground3QDRO:dashboard.yml">Home</a>
    </li>
---
metadata:
  temporary session: True
  hidden: True
  error action: on_error
---
event: on_error
question: |
  Sorry, something went wrong, please click on dashboard button and restart your interview.
buttons:
  - Dashboard: leave
    url: https://doc.lexyalgo.com/interview?i=docassemble.playground3QDRO:dashboard.yml
    color: danger
---
modules:
  - .dastripe
  - .coupon_demo
  - .webhook_new
  - .price_retrieve
  - .read_data
  - .data_from_database
  - .clicksend
  - .parameters
  - .delete_return_id
  - .click_id
---
features:
  labels above fields: True
  progress bar: True
  navigation back button: False
  show progress bar percentage: True
  javascript: https://js.stripe.com/v3/
  popover trigger: click
  css: buttons.css
  question back button: True
  
---

objects:
  - payment: DAStripe.using(payor=email_id, currency='usd')
  - petitioner: Individual
  - respondent: Individual
  - participant: Individual
  - alternate_payee: Individual
  - filing_party: Individual
  - plan_admin: Individual
  - plan_sponsor: Individual
  - company_logo: DAStaticFile.using(filename='logo.png')

---
initial: True
code: |
  data_from_registration = register_data()
  if user_logged_in() and len(data_from_registration) > 0 and 'user.address.address' not in data_from_registration[0]:
    command('leave', url='https://doc.lexyalgo.com/interview?i=docassemble.playground3QDRO:complete_profile_details.yml')
  if not user_logged_in():
    command('leave', url='https://doc.lexyalgo.com/interview?i=docassemble.playground3QDRO:signIn_signUp.yml')       
---
mandatory: True
code: |
  menu_items = [ {'url': 'https://doc.lexyalgo.com/interview?i=docassemble.playground3QDRO:dashboard.yml', 'label': 'Dashboard'},{'url': 'https://doc.lexyalgo.com/interview?i=docassemble.playground3QDRO:edit_profile.yml&new_session=1', 'label': 'Edit Profile'}]
---
code: |
  is_pay = 'false'
  user_data11 = display_copy(origin_of_interviewee)
  data_from_registration = register_data()
  register_dataq = display_register_data(origin_of_interviewee)
  register_dataq1 = display_register_data_j()
  which_button=display_type_of_interview(origin_of_interviewee)
  filee=file_name(origin_of_interviewee)
  qdro_intake_user_name = qdro_intake_user_name_details()
  qdro_intake_data_details = reuse_intake_data(qdro_intake_user_name[0])
  reuse_intake_button=reuse_button_info(qdro_intake_data_details[0]['id'])
  pay_d = display_payment(origin_of_interviewee)
  if (user_info().email == "willie@lexyalgo.com" or user_info().email == "law@williepeacock.com" or user_info().email == "pratibha.mobilefirst@gmail.com") and len(reuse_intake_button) > 0 and not len(which_button) > 0:
    delete_button_info(qdro_intake_data_details[0]['id'])
  if len(user_data11) > 0:
    if len(pay_d) > 0:
      if pay_d[0]['is_paid'] == 'true':
        check = ''
    if "f_name" in user_data11[0]:
      user_data1 = user_data11
    else:
      user_data1[0]['f_name'] = ''
    if "l_name" in user_data11[0]:
      user_data1 = user_data11
    else:
      user_data1[0]['l_name'] = ''
    if "email_id" in user_data11[0]:
      user_data1 = user_data11
    else:
      user_data1[0]['email_id'] = ''
    if "government_plan" in user_data11[0]:
      if len(which_button) > 0 and which_button[0][2] == "reuse":
        user_data1[0]['government_plan'] = ''
      else:
        user_data1 = user_data11
    else:
      user_data1[0]['government_plan'] = ''
    if "Payment_type" in user_data11[0]:
      user_data1 = user_data11
    else:
      user_data1[0]['Payment_type'] = ''
    if "benifit_type" in user_data11[0]:
      user_data1 = user_data11
    else:
      user_data1[0]['benifit_type'] = ''
    if "continuing_benefit" in user_data11[0]:
      user_data1 = user_data11
    else:
      user_data1[0]['continuing_benefit'] = ''
    if "tda_division_method" in user_data11[0]:
      user_data1 = user_data11
    else:
      user_data1[0]['tda_division_method'] = ''
    if "shall" in user_data11[0]:
      user_data1 = user_data11
    else:
      user_data1[0]['shall'] = ''
    if "document" in user_data11[0]:
      user_data1 = user_data11
    else:
      user_data1[0]['document'] = ''
    if "role" in user_data11[0]:
      if len(which_button) > 0 and which_button[0][2] == "reuse":
        user_data1[0]['role'] = ''
      else:
        user_data1 = user_data11
    else:
      user_data1[0]['role'] = ''
    if "role1" in user_data11[0]:
      if len(which_button) > 0 and which_button[0][2] == "reuse":
        user_data1[0]['role1'] = ''
      else:
        user_data1 = user_data11
    else:
      user_data1[0]['role1'] = ''
    if "pick_plan" in user_data11[0]:
      if len(which_button) > 0 and which_button[0][2] == "reuse":
        user_data1[0]['pick_plan'] = ''
      else:
        user_data1 = user_data11
    else:
      user_data1[0]['pick_plan'] = ''
    if "filing_party_name_info" in user_data11[0]:
      user_data1 = user_data11
    else:
      user_data1[0]['filing_party_name_info'] = {
        'filing_party.name.first': '',
        'filing_party.name.middle': '',
        'filing_party.name.last': '',
        'filing_party.email': '',
        'filing_party.phone': '',
        'bar_number':''
        }
        
    if "filing_party_address_info" in user_data11[0]:
      user_data1 = user_data11
    else:
      user_data1[0]['filing_party_address_info'] = {
          'filing_party.address.address': '',
          'filing_party.address.unit': '',
          'filing_party.address.city': '',
          'filing_party.address.state': '',
          'filing_party.address.zip': ''
      }
    if "county" in user_data11[0]:
      user_data1 = user_data11
    else:
      user_data1[0]['county'] = ''
    if "court" in user_data11[0]:
      user_data1 = user_data11
    else:
      user_data1[0]['court'] = ''
    if "case_number" in user_data11[0]:
      user_data1 = user_data11
    else:
      user_data1[0]['case_number'] = ''
    if "judicial_district" in user_data11[0]:
      user_data1 = user_data11
    else:
      user_data1[0]['judicial_district'] = ''
    if "division_number" in user_data11[0]:
      user_data1 = user_data11
    else:
      user_data1[0]['division_number'] = ''
    if "Date_Ddvorce_was_commenced" in user_data11[0]:
      user_data1 = user_data11
    else:
      user_data1[0]['Date_Ddvorce_was_commenced'] = ''
    if "date_of_judgment" in user_data11[0]:
      user_data1 = user_data11
    else:
      user_data1[0]['date_of_judgment'] = ''
    if "petitioner_field" in user_data11[0]:
      user_data1 = user_data11
    else:
      user_data1[0]['petitioner_field'] = {
        'petitioner.name.first': '',
        'petitioner.name.middle': '',
        'petitioner.name.last': ''
      }
    if "respondent_field" in user_data11[0]:
      user_data1 = user_data11
    else:
      user_data1[0]['respondent_field'] = {
        'respondent.name.first': '',
        'respondent.name.middle': '',
        'respondent.name.last': ''
      }
    if "who_is_participant" in user_data11[0]:
      if len(which_button) > 0 and which_button[0][2] == "reuse":
        user_data1[0]['who_is_participant'] = ''
      else:
        user_data1 = user_data11
    else:
      user_data1[0]['who_is_participant'] = ''
    if "participant.dob" in user_data11[0]:
      user_data1[0]['participant.dob'] = decryptStr(user_data11[0]['participant.dob'])
    else:
      user_data1[0]['participant.dob'] = ''
    if "participant.ssn" in user_data11[0]:
      user_data1[0]['participant.ssn'] = decryptStr(user_data11[0]['participant.ssn'])
    else:
      user_data1[0]['participant.ssn'] = ''
    if "participant.phone" in user_data11[0]:
      user_data1[0]['participant.phone'] = decryptStr(user_data11[0]['participant.phone'])
    else:
      user_data1[0]['participant.phone'] = ''
    if "participant.email" in user_data11[0]:
      user_data1[0]['participant.email'] = user_data11[0]['participant.email']
    else:
      user_data1[0]['participant.email'] = ''
    if "participant_address_info" in user_data11[0]:
      user_data1 = user_data11
    else:
      user_data1[0]['participant_address_info'] = {
        'participant.address.address': '',
        'participant.address.unit': '',
        'participant.address.city': '',
        'participant.address.state':'',
        'participant.address.zip':''
      }
    if "alternate_payee.dob" in user_data11[0]:
      user_data1[0]['alternate_payee.dob'] = decryptStr(user_data11[0]['alternate_payee.dob'])
    else:
      user_data1[0]['alternate_payee.dob'] = ''
    if "alternate_payee.ssn" in user_data11[0]:
      user_data1[0]['alternate_payee.ssn'] = decryptStr(user_data11[0]['alternate_payee.ssn'])
    else:
      user_data1[0]['alternate_payee.ssn'] = ''
    if "alternate_payee.phone" in user_data11[0]:
      user_data1[0]['alternate_payee.phone'] = decryptStr(user_data11[0]['alternate_payee.phone'])
    else:
      user_data1[0]['alternate_payee.phone'] = ''
    if "alternate_payee.email" in user_data11[0]:
      user_data1 = user_data11
    else:
      user_data1[0]['alternate_payee.email'] = ''
    if "alternate_payee_address_info" in user_data11[0]:
      user_data1 = user_data11
    else:
      user_data1[0]['alternate_payee_address_info'] = {
        'alternate_payee.address.address': '',
        'alternate_payee.address.unit': '',
        'alternate_payee.address.city': '',
        'alternate_payee.address.state':'',
        'alternate_payee.address.zip':''
      }
    if "percentage" in user_data11[0]:
      if len(which_button) > 0 and which_button[0][2] == "reuse":
        user_data1[0]['percentage'] = ''
      else:
        user_data1 = user_data11
    else:
      user_data1[0]['percentage'] = ''
    if "assignment_date" in user_data11[0]:
      user_data1 = user_data11
    else:
      user_data1[0]['assignment_date'] = ''
    if "dollar" in user_data11[0]:
      if len(which_button) > 0 and which_button[0][2] == "reuse":
        user_data1[0]['dollar'] = ''
      else:
        user_data1 = user_data11
    else:
      user_data1[0]['dollar'] = ''
    if "date_of_marriage" in user_data11[0]:
      user_data1 = user_data11
    else:
      user_data1[0]['date_of_marriage'] = ''
    if "other" in user_data11[0]:
      if len(which_button) > 0 and which_button[0][2] == "reuse":
        user_data1[0]['other'] = ''
      else:
        user_data1 = user_data11
    else:
      user_data1[0]['other'] = ''

  else:
    user_data1 = [{
    'f_name': register_dataq[0]['first_name'] if len(register_dataq) > 0 else '',
    'l_name': register_dataq[0]['last_name'] if len(register_dataq) > 0 else '',
    'email_id': register_dataq[0]['email'] if len(register_dataq) > 0 else '',
    'pick_plan':'',
    'document':'',
    'role':'',
    'role1':'',
    'filing_party_name_info':{
          'filing_party.name.first': register_dataq[0]['first_name'] if len(register_dataq) > 0 and 'first_name' in register_dataq[0] else '',
          'filing_party.name.middle': data_from_registration[0]['user.name.middle'] if len(data_from_registration) > 0 and 'user.name.middle' in data_from_registration[0] else '',
          'filing_party.name.last': register_dataq[0]['last_name'] if len(register_dataq) > 0 and 'last_name' in register_dataq[0] else '',
          'filing_party.email': register_dataq[0]['email'] if len(register_dataq) > 0 and 'email' in register_dataq[0] else '',
          'filing_party.phone': data_from_registration[0]['phone_number'] if len(data_from_registration) > 0 and 'phone_number' in data_from_registration[0] else '',
          'bar_number': data_from_registration[0]['bar_number'] if len(data_from_registration) > 0 and 'bar_number' in data_from_registration[0] else '',
      },
    'filing_party_address_info':{
          'filing_party.address.address': data_from_registration[0]['user.address.address'] if len(data_from_registration) > 0 and 'user.address.address' in data_from_registration[0] else '',
          'filing_party.address.unit': data_from_registration[0]['user.address.unit'] if len(data_from_registration) > 0 and 'user.address.unit' in data_from_registration[0] else '',
          'filing_party.address.city': data_from_registration[0]['user.address.city'] if len(data_from_registration) > 0 and 'user.address.city' in data_from_registration[0] else '',
          'filing_party.address.state': data_from_registration[0]['user.address.state'] if len(data_from_registration) > 0 and 'user.address.state' in data_from_registration[0] else '',
          'filing_party.address.zip': data_from_registration[0]['user.address.zip_code'] if len(data_from_registration) > 0 and 'user.address.zip_code' in data_from_registration[0] else '',
      },
    'county':'',
    'court':'',
    'case_number':'',
    'judicial_district':'',
    'division_number':'',
    'Date_Ddvorce_was_commenced':'',
    'date_of_judgment':'',
    'petitioner_field':{
        'petitioner.name.first': '',
        'petitioner.name.middle': '',
        'petitioner.name.last': ''
      },
    'respondent_field':{
        'respondent.name.first': '',
        'respondent.name.middle': '',
        'respondent.name.last': ''
      },
    'who_is_participant':'',
    'participant.dob':'',
    'participant.ssn':'',
    'participant.phone':'',
    'participant.email':'',
    'participant_address_info':{
      'participant.address.address': '',
      'participant.address.unit': '',
      'participant.address.city': '',
      'participant.address.state':'',
      'participant.address.zip':''
    },
    'alternate_payee.dob':'',
    'alternate_payee.ssn':'',
    'alternate_payee.phone':'',
    'alternate_payee.email':'',
    'alternate_payee_address_info':{
      'alternate_payee.address.address': '',
      'alternate_payee.address.unit': '',
      'alternate_payee.address.city': '',
      'alternate_payee.address.state':'',
      'alternate_payee.address.zip':''
    },
    'percentage':'',
    'assignment_date':'',
    'dollar':'',
    'date_of_marriage':'',
    'Payment_type':'',
    'benifit_type':'',
    'continuing_benefit':'',
    'tda_division_method':'',
    'shall':'',
    'add_other_plan':'',
    'other_plan':'',
    'other':''
    }]
  
  
  jsond = {
    'f_name':f_name,
    'l_name':l_name,
    'email_id':email_id,
    'pick_plan':pick_plan,
    'document':document,
    'role':role,
    'role1':role1,
    'filing_party_name_info':filingJson,
    'filing_party_address_info':filingAddressJson,
    'county':county,
    'court':court,
    'case_number':case_number,
    'judicial_district':judicial_district,
    'division_number':division_number,
    'Date_Ddvorce_was_commenced':str(Date_Ddvorce_was_commenced),
    'date_of_judgment':str(date_of_judgment),
    'petitioner_field':{
  'petitioner.name.first': petitioner.name.first,
  'petitioner.name.middle': petitioner.name.middle,
  'petitioner.name.last': petitioner.name.last
    },
    'respondent_field':{
  'respondent.name.first': respondent.name.first,
  'respondent.name.middle': respondent.name.middle,
  'respondent.name.last': respondent.name.last
    },
    'who_is_participant':who_is_participant,
    'participant.dob':encryptStr(str(participant.dob)),
    'participant.ssn':encryptStr(participant.ssn),
    'participant.phone':encryptStr(participant.phone),
    'participant.email':participant.email,
    'participant_address_info':{
  'participant.address.address': participant.address.address,
  'participant.address.unit': participant.address.unit,
  'participant.address.city': participant.address.city,
  'participant.address.state':participant.address.state,
  'participant.address.zip':participant.address.zip
    },
    'alternate_payee.dob':encryptStr(str(alternate_payee.dob)),
    'alternate_payee.ssn':encryptStr(alternate_payee.ssn),
    'alternate_payee.phone':encryptStr(alternate_payee.phone),
    'alternate_payee.email':alternate_payee.email,
    'alternate_payee_address_info':{
  'alternate_payee.address.address': alternate_payee.address.address,
  'alternate_payee.address.unit': alternate_payee.address.unit,
  'alternate_payee.address.city': alternate_payee.address.city,
  'alternate_payee.address.state':alternate_payee.address.state,
  'alternate_payee.address.zip':alternate_payee.address.zip
    },
    'date_of_marriage':str(date_of_marriage),
    'Payment_type':Payment_type,
    'benifit_type': serialized_benefit_type,
    'continuing_benefit': continuing_benefit if serialized_benefit_type["continuing_benefit"] else '',
    'tda_division_method':tda_division_method,
    'shall':shall if tda_division_method == 'Fixed Monthly Dollar Amount' or tda_division_method == 'Fixed Percentage' else '',
    'percentage':percentage if tda_division_method == 'Fixed Percentage' or Payment_type == 'Fixed Percentage' else '',
    'dollar':dollar if tda_division_method == 'Fixed Monthly Dollar Amount' or Payment_type == 'Fixed Monthly Dollar Amount' else '',
    'assignment_date':str(assignment_date) if serialized_benefit_type["continuing_benefit"] or serialized_benefit_type["survivor_post_retirement"] or serialized_benefit_type["survivor_pre_retirement"] or tda_division_method == 'Fixed Percentage' or tda_division_method == 'Fixed Monthly Dollar Amount' else '',
    'other':other,
    'add_other_plan': add_other_plan,
    'plan_name': plan_name,
     }

  if len(which_button) > 0 and which_button[0][2] == "reuse":
    button_of_interview = which_button[0][2]
    user_data = add(jsond,origin_of_interviewee,is_pay,button_of_interview)
  else:
    button_of_interview = ''
    user_data = add(jsond,origin_of_interviewee,is_pay,button_of_interview)
  
---
mandatory: True
code: |
  set_parts(logo='<img src="' + company_logo.url_for() + '" style="height: 50px">')
---
id: interview order
mandatory: True
code: |
  email_id
  pick_plan
  plan_sponsor_adress_details
  document
  if document == 'California' or document == 'Kansas':
    role
  else:
    role = ''
  if document == 'California' or document == 'Kansas':
    filing_party_name_info
  else:
    filing_party_name_info = ''
  if document == 'California' or document == 'Kansas':
    filing_party_address_info
  else:
    filing_party_address_info = ''
  county
  if document != 'Kansas' or document != 'Missouri' or document != 'New Jersey' or document != 'New York' or document != 'Iowa' or document != 'North Dakota':
    court
  case_number
  if document == 'North Dakota':
    judicial_district
  else: 
    judicial_district = ''
  if document == 'Missouri':
    division_number
  else:
    division_number = ''
  petitioner_field
  respondent_field
  who_is_participant
  participant_info
  participant_address_info
  alternate_payee_info
  alternate_payee_address_info
  date_of_marriage
  Date_Ddvorce_was_commenced
  date_of_judgment 
  if Payment_type == 'Coverture (Time Rule)':
    assignment_date
    date_of_marriage
  if Payment_type == 'Fixed Percentage':
    percentage
  if Payment_type == 'Fixed Monthly Dollar Amount':
    dollar 
  if benifit_type['Should the Alternate Payee be provided survivor benefits under a pre-retirement death benefit?']:
    assignment_date
  if benifit_type['Should the Alternate Payee be provided survivor benefits under a post-retirement death benefit?']:
    assignment_date
  if benifit_type["Should the Alternate Payee be provided a continuing benefit to preserve his/her pension payments in the event of the participant's death before the alternate payee?"]:
    continuing_benefit
    assignment_date
  if tda_division_method == 'Fixed Monthly Dollar Amount':
    shall
    dollar
    assignment_date
  if tda_division_method == 'Fixed Percentage':
    shall
    percentage
    assignment_date
  if len(which_button) > 0 and which_button[0][2] == "reuse":
    draft_shown
    if plan_sponsor.address.on_one_line() == ', ':
      check1
      if check1:
        coupon_page
        final_shown
      else:
        if not payment.paid:
          payment_screen
        if payment.paid:
          final_shown
      
    else:
      if (plan_sponsor.address.address != '' and plan_sponsor.address.city != '' and plan_sponsor.address.state != '' and plan_sponsor.address.zip != ''):
        CheckboX
        if CheckboX:
          check1
          if check1:
            coupon_page
            final_shown
          else:
            if not payment.paid:
              payment_screen
            if payment.paid:
              final_shown
        else:
          check1
          if check1:
            coupon_page
            final_shown
          else:
            if not payment.paid:
              payment_screen
            if payment.paid:
              final_shown
      else:
        check1
        if check1:
          coupon_page
          final_shown
        else:
          if not payment.paid:
            payment_screen
          if payment.paid:
            final_shown

  elif len(pay_d) > 0 and pay_d[0]['is_paid'] == 'true':
    draft_shown = ''
    if plan_sponsor.address.on_one_line() == ', ':
      check1
      if check1:
        coupon_page
        final_shown
      else:
        if not payment.paid:
          payment_screen
        if payment.paid:
          final_shown    
    else:
      if (plan_sponsor.address.address != '' and plan_sponsor.address.city != '' and plan_sponsor.address.state != '' and plan_sponsor.address.zip != ''):
        CheckboX
        if CheckboX:
          check1
          if check1:
            coupon_page
            final_shown
          else:
            if not payment.paid:
              payment_screen
            if payment.paid:
              final_shown
        else:
          final_shown
      else:
        final_shown
  elif len(pay_d) > 0 and pay_d[0]['is_paid'] == 'false':
    draft_shown
    if plan_sponsor.address.on_one_line() == ', ':
      check1
      if check1:
        coupon_page
        final_shown
      else:
        if not payment.paid:
          payment_screen
        if payment.paid:
          final_shown
    else:
      if (plan_sponsor.address.address != '' and plan_sponsor.address.city != '' and plan_sponsor.address.state != '' and plan_sponsor.address.zip != ''): 
        CheckboX
        if CheckboX:
          check1
          if check1:
            coupon_page
            final_shown
          else:
            if not payment.paid:
              payment_screen
            if payment.paid:
              final_shown
        else:
          check1
          if check1:
            coupon_page
            final_shown
          else:
            if not payment.paid:
              payment_screen
            if payment.paid:
              final_shown
      else:
        check1
        if check1:
          coupon_page
          final_shown
        else:
          if not payment.paid:
            payment_screen
          if payment.paid:
            final_shown
      
  else:
    draft_shown
    if plan_sponsor.address.on_one_line() == ', ':
      check1
      if check1:
        coupon_page
        final_shown
      else:
        if not payment.paid:
          payment_screen
        if payment.paid:
          final_shown
    else:
      if (plan_sponsor.address.address != '' and plan_sponsor.address.city != '' and plan_sponsor.address.state != '' and plan_sponsor.address.zip != ''): 
        CheckboX
        if CheckboX:
          check1
          if check1:
            coupon_page
            final_shown
          else:
            if not payment.paid:
              payment_screen
            if payment.paid:
              final_shown
        else:
          check1
          if check1:
            coupon_page
            final_shown
          else:
            if not payment.paid:
              payment_screen
            if payment.paid:
              final_shown
      else:
        check1
        if check1:
          coupon_page
          final_shown
        else:
          if not payment.paid:
            payment_screen
          if payment.paid:
            final_shown

---
code: |
  if 'cid' in url_args:
    click_id = url_args['cid']
  else:
    click_id = ''
---
code: |
  if 'id' in url_args:
    origin_of_interviewee = url_args['id']
  else:
    origin_of_interviewee = 'unknown'

---

---
ga id: TRS_StartWithYou
question: |
  Let’s start with you.
subquestion: |
  We need your information to follow up with you for feedback on our QDRO machine and to provide our contact information in case you run into any issues with the retirement plan. 
fields:
  - First Name: f_name
    default: |
      ${ user_info().first_name }
  - Last Name: l_name
    default: |
      ${ user_info().last_name }
  - E-mail: email_id
    default: |
      ${ user_info().email }
    datatype: email  
---
progress: 15
ga id: TRS_pick_plan
question: |
  Please pick your plan.
fields: 
  - Pick One: pick_plan 
    default: |
      ${ user_data1[0]['pick_plan'] }
    datatype: radio
    choices:
      - TRS 

---
code: |
  if (user_info().email == "willie@lexyalgo.com" or user_info().email == "law@williepeacock.com" or user_info().email == "pratibha.mobilefirst@gmail.com") and len(reuse_intake_button) > 0 and not len(which_button) > 0:
    state_abbreviations = {
      "CA": "California",
      "IA": "Iowa",
      "KS": "Kansas",
      "MO": "Missouri",
      "ND": "North Dakota",
      "NJ": "New Jersey",
      "NY": "New York"
      }
    if qdro_intake_data_details[0]['data']['case_filed_state'] in state_abbreviations:
      state = state_abbreviations[qdro_intake_data_details[0]['data']['case_filed_state']]
  else:
    if len(filee) > 0 and filee[0] == 'docassemble.playground3QDRO:joinder_generator.yml' and len(which_button) > 0 and which_button[0][2] == "reuse":
      state = 'California'
    else:
      state = user_data1[0]['document']
---
code: |
  plan_name = "Teachers Retirement System of the City of New York"
  add_other_plan = False
  other_plan = ''
---
ga id: TRS_divorced_state
question: |
  In which state was the divorce?
fields: 
  - Please select your state: document
    default: |
      ${ state }
    choices:
      - Alabama
      - Alaska
      - Arizona
      - Arkansas
      - California
      - Colorado
      - Connecticut
      - District of Columbia
      - Delaware
      - Florida
      - Georgia
      - Hawaii
      - Idaho
      - Illinois
      - Indiana
      - Iowa
      - Kansas
      - Kentucky
      - Louisiana
      - Maine
      - Maryland
      - Massachusetts
      - Michigan
      - Minnesota
      - Mississippi
      - Missouri
      - Montana
      - Nebraska
      - Nevada
      - New Hampshire
      - New Jersey
      - New Mexico
      - New York 
      - North Carolina
      - North Dakota
      - Oregon
      - Ohio
      - Oklahoma
      - Pennsylvania
      - Rhode Island
      - South Carolina
      - South Dakota
      - Tennessee
      - Texas
      - Utah
      - Vermont
      - Virginia
      - West Virginia
      - Wisconsin
      - Wyoming
      - Washington
---
ga id: TRS_filing_party_role
question: |
  What is the filing party's role in the case?
subquestion: |
  For example, are you the attorney for the plaintiff? Or a limited scope attorney for the respondent?
fields:
  - Role in the case: role
    default: |
      ${ user_data1[0]['role'] }
    datatype: radio
    choices:
      - Petitioner/Plaintiff
      - Respondent/Defendant
      - Attorney
  - Select role in the case: role1
    default: |
      ${ user_data1[0]['role1'] }
    datatype: radio
    choices:
      - Attorney for Petitioner
      - Attorney for Respondent
      - Other
    show if: 
      variable: role
      is: Attorney
  - Fill your role here: other
    default: |
      ${ user_data1[0]['other'] }
    show if :
      variable: role1
      is: Other
---
code: |
  if role != 'Attorney':
    role1 = ''
  if role1 != 'Other':
    other = '' 
---
code: |
  if ((user_info().email == "willie@lexyalgo.com" or user_info().email == "law@williepeacock.com" or user_info().email == "pratibha.mobilefirst@gmail.com") and len(reuse_intake_button) > 0 and not len(which_button) > 0):
    if qdro_intake_data_details[0]['data']['who_are_you'] == "Petitioner/Plantiff":
      petitioner_fname = qdro_intake_data_details[0]['data']['your_field']['Petitioner.name.first']
      petitioner_lname = qdro_intake_data_details[0]['data']['your_field']['Petitioner.name.last']
      respondent_fname = qdro_intake_data_details[0]['data']['ex_spouse_field']['ex_spouse.name.first']
      respondent_lname = qdro_intake_data_details[0]['data']['ex_spouse_field']['ex_spouse.name.last']
    else:
      petitioner_fname = qdro_intake_data_details[0]['data']['ex_spouse_field']['ex_spouse.name.first']
      petitioner_lname = qdro_intake_data_details[0]['data']['ex_spouse_field']['ex_spouse.name.last']
      respondent_fname = qdro_intake_data_details[0]['data']['your_field']['Respondent.name.first']
      respondent_lname = qdro_intake_data_details[0]['data']['your_field']['Respondent.name.last']
  else:
    petitioner_fname = user_data1[0]['petitioner_field']['petitioner.name.first']
    petitioner_lname = user_data1[0]['petitioner_field']['petitioner.name.last']
    respondent_fname = user_data1[0]['respondent_field']['respondent.name.first']
    respondent_lname = user_data1[0]['respondent_field']['respondent.name.last']
---
ga id: TRS_petitioner_field
field: petitioner_field
question: |
  What is the Petitioner/Plaintiff's Name?
fields:
  - First Name: petitioner.name.first
    default: |
      ${ petitioner_fname }
  - Middle Name: petitioner.name.middle
    default: |
      ${ user_data1[0]['petitioner_field']['petitioner.name.middle'] }
    required: False
  - Last Name: petitioner.name.last
    default: |
      ${ petitioner_lname }
---
ga id: TRS_respondent_field
field: respondent_field
question: |
  What is the Respondent/Defendant's name?
fields:
  - First Name: respondent.name.first
    default: |
      ${ respondent_fname }
  - Middle Name: respondent.name.middle
    default: |
      ${ user_data1[0]['respondent_field']['respondent.name.middle'] }
    required: False
  - Last Name: respondent.name.last
    default: |
      ${ respondent_lname }
      
---
code: |
  petitioner_info = petitioner.name
  if role == 'Petitioner/Plaintiff' and (document == 'California' or document == 'Kansas'):
    petitioner.name = filing_party.name
  else: 
    petitioner_info = ''
---
code: |
  respondent_info = respondent.name
  if role == 'Respondent/Defendant' and (document == 'California' or document == 'Kansas'):
    respondent.name = filing_party.name
  else: 
    respondent_info = ''
---
mandatory: True
code: |
    if len(filee) > 0 and len(which_button) > 0 and (which_button[0][2] == "reuse" or which_button[0][2] == "edit"):
      filing_first = user_info().first_name
      filing_middle = data_from_registration[0]['user.name.middle'] if data_from_registration and 'user.name.middle' in data_from_registration[0] else ''
      filing_last = user_info().last_name
      filing_email = user_info().email
      filing_bar = data_from_registration[0]['bar_number'] if data_from_registration and 'bar_number' in data_from_registration[0] else ''
      filing_phone = data_from_registration[0]['phone_number'] if data_from_registration and 'phone_number' in data_from_registration[0] else ''
    else:
      filing_first = user_data1[0]['filing_party_name_info']['filing_party.name.first']
      filing_middle = user_data1[0]['filing_party_name_info']['filing_party.name.middle']
      filing_last = user_data1[0]['filing_party_name_info']['filing_party.name.last']
      filing_email = user_data1[0]['filing_party_name_info']['filing_party.email']
      filing_bar = user_data1[0]['filing_party_name_info']['bar_number']
      filing_phone = user_data1[0]['filing_party_name_info']['filing_party.phone']
    
---
ga id: TRS_filing_party_name_info
field: filing_party_name_info
question: |
  Who will be filing this with the court?
fields:
  - First Name: filing_party.name.first
    default: |
      ${ filing_first }
  - Middle Name: filing_party.name.middle
    default: |
      ${ filing_middle }
    required: False
  - Last Name: filing_party.name.last
    default: |
      ${ filing_last }
  - Email: filing_party.email
    default: |
      ${ filing_email }
    datatype: email
  - Bar Number: bar_number
    default: |
      ${ filing_bar }
    hide if:
      code: |
        role == 'Petitioner/Plaintiff' or role == 'Respondent/Defendant'
  - Phone: filing_party.phone
    default: |
      ${ filing_phone }
validation code: |
  if not phone_number_is_valid(phone_number_formatted(filing_party.phone)):
    validation_error('Phone number is not valid')
---
code: |
  if role == "Petitioner/Plaintiff" and "Respondent/Defendant":
    role_of_filer = "In Pro Per"
---
initial: True
code: |
  if (document == 'California' or document == 'Kansas'):
    filingAddressJson = {
          'filing_party.address.address': filing_party.address.address,
          'filing_party.address.unit': filing_party.address.unit,
          'filing_party.address.city': filing_party.address.city,
          'filing_party.address.state': filing_party.address.state,
          'filing_party.address.zip': filing_party.address.zip
      }
  else:
    filingAddressJson = {
          'filing_party.address.address': '',
          'filing_party.address.unit': '',
          'filing_party.address.city': '',
          'filing_party.address.state': '',
          'filing_party.address.zip': ''
      }
---
initial: True
code: |
  if ((role1 == 'Attorney for Petitioner' or role1 == 'Attorney for Respondent' or role1 == 'Other') and (document == 'California' or document == 'Kansas')):
    filingJson = {
      'filing_party.name.first': filing_party.name.first,
      'filing_party.name.middle': filing_party.name.middle,
      'filing_party.name.last': filing_party.name.last,
      'filing_party.email': filing_party.email,
      'bar_number':bar_number,
      'filing_party.phone': filing_party.phone
    }
  elif ((role == 'Petitioner/Plaintiff' or role == 'Respondent/Defendant') and (document == 'California' or document == 'Kansas')):
    filingJson = {
      'filing_party.name.first': filing_party.name.first,
      'filing_party.name.middle': filing_party.name.middle,
      'filing_party.name.last': filing_party.name.last,
      'filing_party.email': filing_party.email,
      'filing_party.phone': filing_party.phone,
      'bar_number':'',
    }
  else:
    filingJson = {
      'filing_party.name.first': '',
      'filing_party.name.middle': '',
      'filing_party.name.last': '',
      'filing_party.email': '',
      'filing_party.phone': '',
      'bar_number':''
    }
---
mandatory: True
code: |
    if len(filee) > 0 and len(which_button) > 0 and (which_button[0][2] == "reuse" or which_button[0][2] == "edit"):
      filing_add = data_from_registration[0]['user.address.address'] if data_from_registration and 'user.address.address' in data_from_registration[0] else ''
      filing_unit = data_from_registration[0]['user.address.unit'] if data_from_registration and 'user.address.unit' in data_from_registration[0] else ''
      filing_city = data_from_registration[0]['user.address.city'] if data_from_registration and 'user.address.city' in data_from_registration[0] else ''
      filing_state = data_from_registration[0]['user.address.state'] if data_from_registration and 'user.address.state' in data_from_registration[0] else ''
      filing_zip = data_from_registration[0]['user.address.zip_code'] if data_from_registration and 'user.address.zip_code' in data_from_registration[0] else ''
    else:
      filing_add = user_data1[0]['filing_party_address_info']['filing_party.address.address']
      filing_unit = user_data1[0]['filing_party_address_info']['filing_party.address.unit']
      filing_city = user_data1[0]['filing_party_address_info']['filing_party.address.city']
      filing_state = user_data1[0]['filing_party_address_info']['filing_party.address.state']
      filing_zip = user_data1[0]['filing_party_address_info']['filing_party.address.zip']
---
code: |
  if len(register_dataq1) > 0 and len(data_from_registration) > 0:
    filing_party_namE = register_dataq1[0]['first_name'] + ' ' + data_from_registration[0]['user.name.middle'] + ' ' + register_dataq1[0]['last_name']
    filing_party_email= register_dataq1[0]['email']
    filing_party_phone= data_from_registration[0]['phone_number']
    filing_party_bar_number= data_from_registration[0]['bar_number']
    if data_from_registration[0]['user.address.unit'] != '':
      filing_party_addresS = data_from_registration[0]['user.address.address'] +'\n'+ data_from_registration[0]['user.address.unit'] +'\n'+ data_from_registration[0]['user.address.city'] + ' '+ data_from_registration[0]['user.address.state'] + '' + data_from_registration[0]['user.address.zip_code']
    else :
      filing_party_addresS = data_from_registration[0]['user.address.address'] +'\n'+ data_from_registration[0]['user.address.city'] + ' '+ data_from_registration[0]['user.address.state'] + '' + data_from_registration[0]['user.address.zip_code']
  else:
    filing_party_namE = user_info().first_name + ' ' + user_info().last_name
    filing_party_email = user_info().email
    filing_party_phone = ''
    filing_party_bar_number = ''
    filing_party_addresS = ''
---
ga id: TRS_filing_party_address_info
field: filing_party_address_info
question: |
  Please provide the filling party's address. 
fields:
  - Street address: filing_party.address.address
    address autocomplete: True
    default: |
      ${ filing_add }
  - Unit: filing_party.address.unit
    default: |
      ${ filing_unit }
    required: False
  - City: filing_party.address.city
    default: |
      ${ filing_city }
  - State: filing_party.address.state
    default: |
      ${ filing_state }
  - Zip: filing_party.address.zip
    default: |
      ${ filing_zip }
---
mandatory: True
code: |
  if len(filee) > 0 and filee[0] == 'docassemble.playground3QDRO:joinder_generator.yml' and len(which_button) > 0 and which_button[0][2] == "reuse":
    if user_data11[0]['add_other_court']:
      courtt = user_data11[0]['other_court']
      countyy = user_data11[0]['other_court_district']
    else:
      court_detail = user_data11[0]['court_name']
      court_add = court_address(court_detail)
      courtt = user_data11[0]['court_name']
      countyy = court_add[0]['count_court_district']
  else:
    courtt = user_data1[0]['court']
    countyy = user_data1[0]['county']
---
ga id: TRS_county
question: |
  In which county did the divorce take place?
subquestion: |
  The QDRO is almost always filed in the same county and courthouse as your divorce judgment.
fields:
  - County: county
    default: |
      ${ countyy }
---

ga id: TRS_court
question: |
  Please provide the name of the court where your divorce was processed. 
subquestion: |
  For example: “Orange County - Lamoreaux Justice Center.”
fields:
  - Court: court
    default: |
      ${ courtt }
---
ga id: TRS_division_number
question: |
  Division Number
fields:
  - Division number: division_number
    default: |
      ${ user_data1[0]['division_number'] }
---
ga id: TRS_judicial_district
question: |
  What is the judicial district?
fields:
  - Judicial District: judicial_district
    default: |
      ${ user_data1[0]['judicial_district'] }
---
code: |
  if (user_info().email == "willie@lexyalgo.com" or user_info().email == "law@williepeacock.com" or user_info().email == "pratibha.mobilefirst@gmail.com") and len(reuse_intake_button) > 0 and not len(which_button) > 0:
    case_num = qdro_intake_data_details[0]['data']['case_number']
  else: 
    case_num = user_data1[0]['case_number']
---
ga id: TRS_case_number
question: |
  Case Number
fields:
  - Case Number: case_number
    default: |  
      ${ case_num }

---
ga id: TRS_plan_sponsor_adress_details
field: plan_sponsor_adress_details
question: |
  Please provide the Plan Sponsor's address details.
fields:
  - Street address: plan_sponsor.address.address
    default: |
      55 Water Street
    address autocomplete: True
  - Unit: plan_sponsor.address.unit
    required: False
  - City: plan_sponsor.address.city
    default: |
      New York
  - State: plan_sponsor.address.state
    default: |
      NY
  - Zip: plan_sponsor.address.zip
    default: |
      11201
---


code: |
  if ((user_info().email == "willie@lexyalgo.com" or user_info().email == "law@williepeacock.com" or user_info().email == "pratibha.mobilefirst@gmail.com") and len(reuse_intake_button) > 0 and not len(which_button) > 0):
    if qdro_intake_data_details[0]['data']['who_are_you'] == 'Petitioner/Plantiff':
      which_party = 'Petitioner-Plaintiff'
    else:
      which_party = 'Respondent-Defendant'
  else:
    which_party = user_data1[0]['who_is_participant']
---
ga id: TRS_who_is_participant
question: |
  Please select the employee (participant) spouse who is associated with this retirement plan.
fields:
  - Who is the participant: who_is_participant
    default: |
      ${ which_party }
    datatype: radio
    choices:
      - Petitioner-Plaintiff
      - Respondent-Defendant
  - note: |
      What's the participant name?
    show if: 
      variable: who_is_participant
      is: Petitioner-Plaintiff
  - First Name: participant_first
    default: |
      ${ petitioner.name.first }
    show if:
      variable: who_is_participant
      is: Petitioner-Plaintiff
  - Middle Name: participant_middle
    default: |
      ${ petitioner.name.middle }
    required: False
    show if:
      variable: who_is_participant
      is: Petitioner-Plaintiff
  - Last Name: participant_last
    default: |
      ${ petitioner.name.last }
    show if:
      variable: who_is_participant
      is: Petitioner-Plaintiff
  - note: |
      What's the participant name?   
    show if: 
      variable: who_is_participant
      is: Defendant-Respondent
  - First Name: participant1_first
    default: |
      ${ respondent.name.first }
    show if:
      variable: who_is_participant
      is: Respondent-Defendant
  - Middle Name: participant1_middle
    default: |
      ${ respondent.name.middle }
    required: False
    show if:
      variable: who_is_participant
      is: Respondent-Defendant
  - Last Name: participant1_last
    default: |
      ${ respondent.name.last }
    show if:
      variable: who_is_participant
      is: Respondent-Defendant

---
progress: 50
ga id: TRS_participant_info
field: participant_info
question: |
  Please fill in the Participant's information. 

fields:
  - Date Of Birth: participant.dob
    default: |
      ${ party_dob }
    hint: MM/DD/YYYY
    datatype: date
  - Social Security Number: participant.ssn
    default: |
      ${ party_ssn }
    datatype: ssn
    hint: XXX-XX-XXXX
  - Phone: participant.phone
    hint: (XXX)-XXX-XXXX
    default: |
      ${ party_phone }
  - E-Mail: participant.email
    datatype: email
    default: |
      ${ party_email }
validation code: |
  if not phone_number_is_valid(phone_number_formatted(participant.phone)):
    validation_error('Phone number is not valid')

---
code: |
  if (user_info().email == "willie@lexyalgo.com" or user_info().email == "law@williepeacock.com" or user_info().email == "pratibha.mobilefirst@gmail.com") and len(reuse_intake_button) > 0 and not len(which_button) > 0:
    if who_is_participant == "Petitioner-Plaintiff":
      if qdro_intake_data_details[0]['data']['who_are_you'] == "Petitioner/Plantiff":
        party_add = qdro_intake_data_details[0]['data']['your_field']['Petitioner.address.address']
        party_unit = qdro_intake_data_details[0]['data']['your_field']['Petitioner.address.address2-']
        party_city = qdro_intake_data_details[0]['data']['your_field']['Petitioner.address.city'] 
        party_state = qdro_intake_data_details[0]['data']['your_field']['Petitioner.address.state']
        party_zip = qdro_intake_data_details[0]['data']['your_field']['Petitioner.address.zip']
        alternate_party_add = qdro_intake_data_details[0]['data']['ex_spouse_field']['ex_spouse.address.address']
        alternate_party_unit =  qdro_intake_data_details[0]['data']['ex_spouse_field']['ex_spouse.address.address2-']
        alternate_party_city = qdro_intake_data_details[0]['data']['ex_spouse_field']['ex_spouse.address.city']
        alternate_party_state =  qdro_intake_data_details[0]['data']['ex_spouse_field']['ex_spouse.address.state']
        alternate_party_zip = qdro_intake_data_details[0]['data']['ex_spouse_field']['ex_spouse.address.zip']
      else:
        party_add = qdro_intake_data_details[0]['data']['ex_spouse_field']['ex_spouse.address.address']
        party_unit = qdro_intake_data_details[0]['data']['ex_spouse_field']['ex_spouse.address.address2-']
        party_city = qdro_intake_data_details[0]['data']['ex_spouse_field']['ex_spouse.address.city'] 
        party_state = qdro_intake_data_details[0]['data']['ex_spouse_field']['ex_spouse.address.state']
        party_zip = qdro_intake_data_details[0]['data']['ex_spouse_field']['ex_spouse.address.zip'] 
        alternate_party_add = qdro_intake_data_details[0]['data']['your_field']['Respondent.address.address']
        alternate_party_unit =  qdro_intake_data_details[0]['data']['your_field']['Respondent.address.address2-']
        alternate_party_city = qdro_intake_data_details[0]['data']['your_field']['Respondent.address.city'] 
        alternate_party_state =  qdro_intake_data_details[0]['data']['your_field']['Petitioner.address.state']
        alternate_party_zip = qdro_intake_data_details[0]['data']['your_field']['Respondent.address.zip'] 
    else:
      if qdro_intake_data_details[0]['data']['who_are_you'] == "Petitioner/Plantiff":
        party_add = qdro_intake_data_details[0]['data']['ex_spouse_field']['ex_spouse.address.address']
        party_unit = qdro_intake_data_details[0]['data']['ex_spouse_field']['ex_spouse.address.address2-']
        party_city = qdro_intake_data_details[0]['data']['ex_spouse_field']['ex_spouse.address.city'] 
        party_state = qdro_intake_data_details[0]['data']['ex_spouse_field']['ex_spouse.address.state']
        party_zip = qdro_intake_data_details[0]['data']['ex_spouse_field']['ex_spouse.address.zip'] 
        alternate_party_add = qdro_intake_data_details[0]['data']['your_field']['Petitioner.address.address']
        alternate_party_unit =  qdro_intake_data_details[0]['data']['your_field']['Petitioner.address.address2-']
        alternate_party_city = qdro_intake_data_details[0]['data']['your_field']['Petitioner.address.city'] 
        alternate_party_state =  qdro_intake_data_details[0]['data']['your_field']['Petitioner.address.state']
        alternate_party_zip = qdro_intake_data_details[0]['data']['your_field']['Petitioner.address.zip'] 
      else: 
        party_add = qdro_intake_data_details[0]['data']['your_field']['Respondent.address.address']
        party_unit = qdro_intake_data_details[0]['data']['your_field']['Respondent.address.address2-']
        party_city = qdro_intake_data_details[0]['data']['your_field']['Respondent.address.city'] 
        party_state = qdro_intake_data_details[0]['data']['your_field']['Petitioner.address.state']
        party_zip = qdro_intake_data_details[0]['data']['your_field']['Respondent.address.zip']
        alternate_party_add = qdro_intake_data_details[0]['data']['ex_spouse_field']['ex_spouse.address.address']
        alternate_party_unit =  qdro_intake_data_details[0]['data']['ex_spouse_field']['ex_spouse.address.address2-']
        alternate_party_city = qdro_intake_data_details[0]['data']['ex_spouse_field']['ex_spouse.address.city']
        alternate_party_state =  qdro_intake_data_details[0]['data']['ex_spouse_field']['ex_spouse.address.state']
        alternate_party_zip = qdro_intake_data_details[0]['data']['ex_spouse_field']['ex_spouse.address.zip']       
  else:
    if len(filee) > 0 and filee[0] == 'docassemble.playground3QDRO:qdro.yml' and len(which_button) > 0 and (which_button[0][2] == "reuse" or which_button[0][2] == "edit") and who_is_participant == 'Petitioner-Plaintiff':
        party_add =  user_data1[0]['participant_address_info']['participant.address.address']
        party_unit=  user_data1[0]['participant_address_info']['participant.address.unit']
        party_city =  user_data1[0]['participant_address_info']['participant.address.city']
        party_state=  user_data1[0]['participant_address_info']['participant.address.state']
        party_zip =  user_data1[0]['participant_address_info']['participant.address.zip']
        alternate_party_add = user_data1[0]['alternate_payee_address_info']['alternate_payee.address.address']
        alternate_party_unit = user_data1[0]['alternate_payee_address_info']['alternate_payee.address.unit']
        alternate_party_city = user_data1[0]['alternate_payee_address_info']['alternate_payee.address.city']
        alternate_party_state = user_data1[0]['alternate_payee_address_info']['alternate_payee.address.state']
        alternate_party_zip = user_data1[0]['alternate_payee_address_info']['alternate_payee.address.zip']
        
    elif len(filee) > 0 and filee[0] == 'docassemble.playground3QDRO:qdro.yml' and len(which_button) > 0 and (which_button[0][2] == "reuse" or which_button[0][2] == "edit") and who_is_participant == "Respondent-Defendant":
        party_add = user_data1[0]['alternate_payee_address_info']['alternate_payee.address.address']
        party_unit = user_data1[0]['alternate_payee_address_info']['alternate_payee.address.unit']
        party_city = user_data1[0]['alternate_payee_address_info']['alternate_payee.address.city']
        party_state = user_data1[0]['alternate_payee_address_info']['alternate_payee.address.state']
        party_zip = user_data1[0]['alternate_payee_address_info']['alternate_payee.address.zip']
        alternate_party_add =  user_data1[0]['participant_address_info']['participant.address.address']
        alternate_party_unit=  user_data1[0]['participant_address_info']['participant.address.unit']
        alternate_party_city =  user_data1[0]['participant_address_info']['participant.address.city']
        alternate_party_state=  user_data1[0]['participant_address_info']['participant.address.state']
        alternate_party_zip =  user_data1[0]['participant_address_info']['participant.address.zip']
    else:
        party_add =  user_data1[0]['participant_address_info']['participant.address.address']
        party_unit=  user_data1[0]['participant_address_info']['participant.address.unit']
        party_city =  user_data1[0]['participant_address_info']['participant.address.city']
        party_state=  user_data1[0]['participant_address_info']['participant.address.state']
        party_zip =  user_data1[0]['participant_address_info']['participant.address.zip']
        alternate_party_add = user_data1[0]['alternate_payee_address_info']['alternate_payee.address.address']
        alternate_party_unit = user_data1[0]['alternate_payee_address_info']['alternate_payee.address.unit']
        alternate_party_city = user_data1[0]['alternate_payee_address_info']['alternate_payee.address.city']
        alternate_party_state = user_data1[0]['alternate_payee_address_info']['alternate_payee.address.state']
        alternate_party_zip = user_data1[0]['alternate_payee_address_info']['alternate_payee.address.zip']
    
    if len(filee) > 0 and filee[0] == 'docassemble.playground3QDRO:joinder_generator.yml' and len(which_button) > 0 and which_button[0][2] == "reuse":
      if who_is_participant == "Petitioner-Plaintiff":
        party_add =  user_data11[0]['petitioner_field']['petitioner.address.address']
        party_unit=  user_data11[0]['petitioner_field']['petitioner.address.unit']
        party_city =  user_data11[0]['petitioner_field']['petitioner.address.city']
        party_state=  user_data11[0]['petitioner_field']['petitioner.address.state']
        party_zip =  user_data11[0]['petitioner_field']['petitioner.address.zip']
        alternate_party_add =  user_data11[0]['respondent_field']['respondent.address.address']
        alternate_party_unit = user_data11[0]['respondent_field']['respondent.address.unit']
        alternate_party_city =  user_data11[0]['respondent_field']['respondent.address.city']
        alternate_party_state = user_data11[0]['respondent_field']['respondent.address.state']
        alternate_party_zip =  user_data11[0]['respondent_field']['respondent.address.zip']
        
      if who_is_participant == "Respondent-Defendant":
        party_add =  user_data11[0]['respondent_field']['respondent.address.address']
        party_unit = user_data11[0]['respondent_field']['respondent.address.unit']
        party_city =  user_data11[0]['respondent_field']['respondent.address.city']
        party_state = user_data11[0]['respondent_field']['respondent.address.state']
        party_zip =  user_data11[0]['respondent_field']['respondent.address.zip']
        alternate_party_add =  user_data11[0]['petitioner_field']['petitioner.address.address']
        alternate_party_unit=  user_data11[0]['petitioner_field']['petitioner.address.unit']
        alternate_party_city =  user_data11[0]['petitioner_field']['petitioner.address.city']
        alternate_party_state=  user_data11[0]['petitioner_field']['petitioner.address.state']
        alternate_party_zip =  user_data11[0]['petitioner_field']['petitioner.address.zip']
---
progress: 55
ga id: TRS_participant_address_info
field: participant_address_info
question: |
  Please fill in the Participant's address.
fields:
  - Street address: participant.address.address
    address autocomplete: True
    default: |
      ${ party_add }
  - Unit: participant.address.unit
    default: |
      ${ party_unit }
    required: False
  - City: participant.address.city
    default: |
      ${ party_city }
  - State: participant.address.state
    default: |
      ${ party_state }
  - Zip: participant.address.zip
    default: |
      ${ party_zip }

---
progress: 60
ga id: TRS_alternate_payee_info
field: alternate_payee_info
question: |
  Please fill in the Alternate Payee's information.
fields:
  - Date Of Birth: alternate_payee.dob
    default: |
      ${ alternate_party_dob }
    datatype: date
    hint: MM/DD/YYYY
  - Social Security Number: alternate_payee.ssn
    default: |
      ${ alternate_party_ssn }
    datatype: ssn
    hint: XXX-XX-XXXX
  - Phone: alternate_payee.phone
    hint: (XXX)-XXX-XXXX
    default: |
      ${ alternate_party_phone }
  - E-Mail: alternate_payee.email
    datatype: email
    default: |
      ${ alternate_party_email }
validation code: |
  if not phone_number_is_valid(phone_number_formatted(alternate_payee.phone)):
    validation_error('Phone number is not valid')
---
progress: 70
ga id: TRS_alternate_payee_address_info
field: alternate_payee_address_info
question: |
  Please fill in the Alternate Payee's address.
fields:
  - Street address: alternate_payee.address.address
    address autocomplete: True
    default: |
      ${ alternate_party_add }
  - Unit: alternate_payee.address.unit
    default: |
      ${ alternate_party_unit }
    required: False
  - City: alternate_payee.address.city
    default: |
      ${ alternate_party_city }
  - State: alternate_payee.address.state
    default: |
      ${ alternate_party_state }
  - Zip: alternate_payee.address.zip
    default: |
      ${ alternate_party_zip }
---
mandatory: True
code: |
  if (user_info().email == "willie@lexyalgo.com" or user_info().email == "law@williepeacock.com" or user_info().email == "pratibha.mobilefirst@gmail.com") and len(reuse_intake_button) > 0 and not len(which_button) > 0:
    if who_is_participant == "Petitioner-Plaintiff":
      if qdro_intake_data_details[0]['data']['who_are_you'] == "Petitioner/Plantiff":
        party_dob = qdro_intake_data_details[0]['data']['your_field']['Petitioner_birth_date']
        party_ssn = qdro_intake_data_details[0]['data']['your_field']['Petitioner_social_security_number']
        party_phone = qdro_intake_data_details[0]['data']['your_field']['Petitioner_phone']
        party_email = qdro_intake_data_details[0]['data']['your_field']['Petitioner_email'] 
        alternate_party_dob = qdro_intake_data_details[0]['data']['ex_spouse_field']['ex_spouse_birth_date']
        alternate_party_ssn = qdro_intake_data_details[0]['data']['ex_spouse_field']['ex_spouse_social_security_number']
        alternate_party_phone =  qdro_intake_data_details[0]['data']['ex_spouse_field']['ex_spouse_phone']
        alternate_party_email = qdro_intake_data_details[0]['data']['ex_spouse_field']['ex_spouse_email']
      else:
        party_dob = qdro_intake_data_details[0]['data']['ex_spouse_field']['ex_spouse_birth_date']
        party_ssn = qdro_intake_data_details[0]['data']['ex_spouse_field']['ex_spouse_social_security_number']
        party_phone = qdro_intake_data_details[0]['data']['ex_spouse_field']['ex_spouse_phone']
        party_email = qdro_intake_data_details[0]['data']['ex_spouse_field']['ex_spouse_email'] 
        alternate_party_dob = qdro_intake_data_details[0]['data']['your_field']['Respondent_birth_date']
        alternate_party_ssn = qdro_intake_data_details[0]['data']['your_field']['Respondent_social_security_number']
        alternate_party_phone =  qdro_intake_data_details[0]['data']['your_field']['Respondent_phone']
        alternate_party_email = qdro_intake_data_details[0]['data']['your_field']['Respondent_email'] 
    else:
      if qdro_intake_data_details[0]['data']['who_are_you'] == "Petitioner/Plantiff":
        party_dob = qdro_intake_data_details[0]['data']['ex_spouse_field']['ex_spouse_birth_date']
        party_ssn = qdro_intake_data_details[0]['data']['ex_spouse_field']['ex_spouse_social_security_number']
        party_phone = qdro_intake_data_details[0]['data']['ex_spouse_field']['ex_spouse_phone']
        party_email = qdro_intake_data_details[0]['data']['ex_spouse_field']['ex_spouse_email'] 
        alternate_party_dob = qdro_intake_data_details[0]['data']['your_field']['Petitioner_birth_date']
        alternate_party_ssn = qdro_intake_data_details[0]['data']['your_field']['Petitioner_social_security_number']
        alternate_party_phone =  qdro_intake_data_details[0]['data']['your_field']['Petitioner_phone']
        alternate_party_email = qdro_intake_data_details[0]['data']['your_field']['Petitioner_email']
      else: 
        party_dob = qdro_intake_data_details[0]['data']['your_field']['Respondent_birth_date']
        party_ssn = qdro_intake_data_details[0]['data']['your_field']['Respondent_social_security_number']
        party_phone = qdro_intake_data_details[0]['data']['your_field']['Respondent_phone']
        party_email = qdro_intake_data_details[0]['data']['your_field']['Respondent_email']
        alternate_party_dob = qdro_intake_data_details[0]['data']['ex_spouse_field']['ex_spouse_birth_date']
        alternate_party_ssn = qdro_intake_data_details[0]['data']['ex_spouse_field']['ex_spouse_social_security_number']
        alternate_party_phone =  qdro_intake_data_details[0]['data']['ex_spouse_field']['ex_spouse_phone']
        alternate_party_email = qdro_intake_data_details[0]['data']['ex_spouse_field']['ex_spouse_email']
  else:
    if len(filee) > 0 and filee[0] == 'docassemble.playground3QDRO:qdro.yml' and len(which_button) > 0 and (which_button[0][2] == "reuse" or which_button[0][2] == "edit") and who_is_participant == 'Petitioner-Plaintiff':
      party_phone = user_data1[0]['participant.phone']
      party_email = user_data1[0]['participant.email']
      party_dob = user_data1[0]['participant.dob']
      party_ssn = user_data1[0]['participant.ssn']
      alternate_party_phone = user_data1[0]['alternate_payee.phone']
      alternate_party_email = user_data1[0]['alternate_payee.email']
      alternate_party_dob = user_data1[0]['alternate_payee.dob']
      alternate_party_ssn = user_data1[0]['alternate_payee.ssn']
    elif len(filee) > 0 and filee[0] == 'docassemble.playground3QDRO:qdro.yml' and len(which_button) > 0 and (which_button[0][2] == "reuse" or which_button[0][2] == "edit") and who_is_participant == 'Respondent-Defendant':
      party_phone = user_data1[0]['alternate_payee.phone']
      party_email = user_data1[0]['alternate_payee.email']
      party_dob = user_data1[0]['alternate_payee.dob']
      party_ssn = user_data1[0]['alternate_payee.ssn']
      alternate_party_phone = user_data1[0]['participant.phone']
      alternate_party_email = user_data1[0]['participant.email']
      alternate_party_dob = user_data1[0]['participant.dob']
      alternate_party_ssn = user_data1[0]['participant.ssn']
    else:
      party_phone = user_data1[0]['participant.phone']
      party_email = user_data1[0]['participant.email']
      party_dob = user_data1[0]['participant.dob']
      party_ssn = user_data1[0]['participant.ssn']
      alternate_party_phone = user_data1[0]['alternate_payee.phone']
      alternate_party_email = user_data1[0]['alternate_payee.email']
      alternate_party_dob = user_data1[0]['alternate_payee.dob']
      alternate_party_ssn = user_data1[0]['alternate_payee.ssn']
      
        
    if len(filee) > 0 and filee[0] == 'docassemble.playground3QDRO:joinder_generator.yml' and len(which_button) > 0 and which_button[0][2] == "reuse":
      if who_is_participant == "Petitioner-Plaintiff":
        party_phone =  user_data11[0]['petitioner_field']['petitioner_phone']
        party_email=  user_data11[0]['petitioner_field']['petitioner_email']
        party_dob = user_data1[0]['participant.dob']
        party_ssn = user_data1[0]['participant.ssn']
        alternate_party_phone =  user_data11[0]['respondent_field']['respondent_phone']
        alternate_party_email = user_data11[0]['respondent_field']['respondent_email']
        alternate_party_dob = user_data1[0]['alternate_payee.dob']
        alternate_party_ssn = user_data1[0]['alternate_payee.ssn']
        
      if who_is_participant == "Respondent-Defendant":
        party_phone =  user_data11[0]['respondent_field']['respondent_phone']
        party_email =  user_data11[0]['respondent_field']['respondent_email']
        party_dob = user_data1[0]['alternate_payee.dob']
        party_ssn = user_data1[0]['alternate_payee.ssn']
        alternate_party_phone = user_data11[0]['petitioner_field']['petitioner_phone']
        alternate_party_email = user_data11[0]['petitioner_field']['petitioner_email']
        alternate_party_dob = user_data1[0]['alternate_payee.dob']
        alternate_party_ssn = user_data1[0]['alternate_payee.ssn']
---
initial: True
code: |
  participant_adddess = participant.address
  if (role == 'Petitioner/Plaintiff' and who_is_participant == 'Petitioner-Plaintiff') or (role == 'Respondent/Defendant' and who_is_participant == 'Respondent-Defendant'):
    participant.address = filing_party.address
  else: 
    participant_adddess = ''
---
initial: True
code: |
  alternate_payee_address = alternate_payee.address
  if (role == 'Petitioner/Plaintiff' and who_is_participant == 'Respondent-Defendant') or (role == 'Respondent/Defendant' and who_is_participant == 'Petitioner-Plaintiff'):
    alternate_payee.address = filing_party.address
  else: 
    alternate_payee_address = ''
---
initial: True
code: |
  if (role == 'Petitioner/Plaintiff' and who_is_participant == 'Petitioner-Plaintiff') or (role == 'Respondent/Defendant' and who_is_participant == 'Respondent-Defendant'):
    participant_phone = filing_party.phone
  else: 
    participant_phone = ''
---
initial: True
code: |
  if (role == 'Petitioner/Plaintiff' and who_is_participant == 'Respondent-Defendant') or (role == 'Respondent/Defendant' and who_is_participant == 'Petitioner-Plaintiff'):
    alternate_payee_phone = filing_party.phone
  else: 
    alternate_payee_phone = ''
---
initial: True
code: |
  if (role == 'Petitioner/Plaintiff' and who_is_participant == 'Petitioner-Plaintiff') or (role == 'Respondent/Defendant' and who_is_participant == 'Respondent-Defendant'):
    participant_email = filing_party.email
  else: 
    participant_email = ''
---
initial: True
code: |
  if (role == 'Petitioner/Plaintiff' and who_is_participant == 'Respondent-Defendant') or (role == 'Respondent/Defendant' and who_is_participant == 'Petitioner-Plaintiff'):
    alternate_payee_email = filing_party.email
  else: 
    alternate_payee_email = ''

---
ga id: TRS_assignment_date
question: |
  What is the assignment (plan division) date?
subquestion: |
  Please note: this date is very important and is set by law in your state, unless you agreed otherwise in your divorce agreement. [(Read more here)](${ url_of('https://www.lexyalgo.com/what-is-the-assignment-date-valuation-date-in-a-qdro/') }){:target="_blank"}.
fields:
  - Date of assignment: assignment_date
    default: |
      ${ user_data1[0]['assignment_date'] }
    datatype: date

---
code: |
  if (user_info().email == "willie@lexyalgo.com" or user_info().email == "law@williepeacock.com" or user_info().email == "pratibha.mobilefirst@gmail.com") and len(reuse_intake_button) > 0 and not len(which_button) > 0:
    dom = qdro_intake_data_details[0]['data']['date_of_marriage']
  else:
    if len(filee) > 0 and filee[0] == 'docassemble.playground3QDRO:joinder_generator.yml' and len(which_button) > 0 and which_button[0][2] == "reuse":
      dom = user_data11[0]['petition_dom']
    else:
      dom = user_data1[0]['date_of_marriage']
---
ga id: TRS_Date_Ddvorce_was_commenced
question: |
  When did the divorce proceedings begin?
fields:
  - Date of divorce proceedings: Date_Ddvorce_was_commenced
    default: |
      ${ user_data1[0]['Date_Ddvorce_was_commenced'] }
    datatype: date
---
ga id: TRS_date_of_judgment
question: |
  What is the date of judgment?
fields:
  - Date of judgment: date_of_judgment
    default: |
      ${ user_data1[0]['date_of_judgment'] }
    datatype: date
---
ga id: TRS_date_of_marriage
question: |
  What is the date of marriage
fields:
  - Date of Marriage: date_of_marriage
    default: |
      ${ dom }
    datatype: date
---
ga id: TRS_dollar
question: |
  What is the dollar amount that the non-employee spouse will receive?  
fields:
  - Dollar: dollar
    default: |
      ${ user_data1[0]['dollar'] }
    datatype: currency 
continue button color: primary
---
ga id: TRS_percentage
question: |
  What is the percentage that the non-employee spouse will receive? 
subquestion: |
  If your divorce did not specify a percentage, most courts operate off of a presumption of 50% of the funds that went into the account during the marriage.
fields:
  - Percentage: percentage
    default: |
      ${ user_data1[0]['percentage'] }
    datatype: integer
    min: 0
    max: 100

---
ga id: TRS_Payment_type
question: |
  Select your division method.
fields:
  - Choose one[(Read more here)](${ url_of('https://www.lexyalgo.com/how-to-divide-a-pension-via-qdro-time-rule-frozen-coverture-fixed-dollar-percent-and-more/') }){:target="_blank"}.: Payment_type
    default: |
      ${ user_data1[0]['Payment_type'] }
    datatype: radio
    choices:
      - Coverture (Time Rule)
      - Fixed Monthly Dollar Amount
      - Fixed Percentage
---
progress: 85
ga id: TRS_tda_division_method
question: |
  TDA (Tax Deferred Annuity – Deferred Compensation Plan).
fields:
  - Choose one: tda_division_method
    default: |
      ${ user_data1[0]['tda_division_method'] }
    datatype: radio
    choices:
      - Fixed Monthly Dollar Amount
      - Fixed Percentage
      - Do Not Divide TDA Plan
---
ga id: TRS_shall_shallNot
question: |
  Should the amount assigned be adjusted for investment earnings and/or losses from the assignment date to the date the money is distributed?
fields: 
  - Adjust for investment changes between assignment and distribution?: shall
    default: |
      ${ user_data1[0]['shall'] }
    datatype: yesnoradio

    
---
code: |
  serialized_benefit_type = {
    "survivor_pre_retirement": benifit_type.get("Should the Alternate Payee be provided survivor benefits under a pre-retirement death benefit?", False),
    "survivor_post_retirement": benifit_type.get("Should the Alternate Payee be provided survivor benefits under a post-retirement death benefit?", False),
    "continuing_benefit": benifit_type.get("Should the Alternate Payee be provided a continuing benefit to preserve his/her pension payments in the event of the participant's death before the alternate payee?", False)}
---
ga id: TRS_benifit_type
question: |
  Choose the type of benefit.
fields:
  - Choose one: benifit_type
    default: |
      ${ user_data1[0]['benifit_type'] }
    datatype: checkboxes
    choices:
      - Should the Alternate Payee be provided survivor benefits under a pre-retirement death benefit?
      - Should the Alternate Payee be provided survivor benefits under a post-retirement death benefit?
      - Should the Alternate Payee be provided a continuing benefit to preserve his/her pension payments in the event of the participant's death before the alternate payee?
---
ga id: TRS_continuing_benefit
question: |
  Choose the ongoing form of benefit. 
fields:
  - Select one: continuing_benefit
    default: |
      ${ user_data1[0]['continuing_benefit'] }
    datatype: radio
    choices:
      - No Continuing Benefit
      - CONTINUING PAYMENT OPTION
      - TERM-CERTAIN OPTION
    show if: 
      code: | 
        benifit_type["Should the Alternate Payee be provided a continuing benefit to preserve his/her pension payments in the event of the participant's death before the alternate payee?"]

---
mandatory: True
code: |
  interview_id = retrieve_interview_id()
  
---
ga id: TRS_you_need_to_pay_first
event: payment_screen
question: |
  You need to pay first. ${ check } 
---
code: |
  Cookie_value = get_cookies()
  output_file = [final_document.path()]
  urls=''
  if len(which_button) > 0 and which_button[0][2] == "reuse":
    if (plan_sponsor.address.address != '' and plan_sponsor.address.city != '' and plan_sponsor.address.state != '' and plan_sponsor.address.zip != ''):
      if CheckboX:
        urls = [item['data']['_url'] for item in file_url(output_file)]
        payment_amount = 108.99
      else:
        payment_amount = 99.00
    else:
      payment_amount = 99.00
  elif len(which_button) > 0 and which_button[0][2] == "edit" and len(pay_d) > 0 and pay_d[0]['is_paid'] == 'false':
    if (plan_sponsor.address.address != '' and plan_sponsor.address.city != '' and plan_sponsor.address.state != '' and plan_sponsor.address.zip != ''):
      if CheckboX:
        urls = [item['data']['_url'] for item in file_url(output_file)]
        payment_amount = 108.99
      else:
        payment_amount = 99.00
    else:
      payment_amount = 99.00
  elif len(which_button) > 0 and which_button[0][2] == "edit" and len(pay_d) > 0 and pay_d[0]['is_paid'] == 'true':
    if (plan_sponsor.address.address != '' and plan_sponsor.address.city != '' and plan_sponsor.address.state != '' and plan_sponsor.address.zip != ''):
      if CheckboX:
        urls = [item['data']['_url'] for item in file_url(output_file)]
        payment_amount = 9.99
  else:
    if (plan_sponsor.address.address != '' and plan_sponsor.address.city != '' and plan_sponsor.address.state != '' and plan_sponsor.address.zip != ''):
      if CheckboX:
        urls = [item['data']['_url'] for item in file_url(output_file)]
        payment_amount = 108.99
      else:
        payment_amount = 99.00
    else:
      payment_amount = 99.00
  payment.amount = payment_amount
---
ga id: TRS_To_proceed_please_make_payment
question: |
  To proceed, please make a payment for your documents.
subquestion: |
  In order to cover our development costs, we are initially charging $${payment.amount} per QDRO. If you are unhappy with your QDRO, we have a 100% satisfaction guarantee - just reach out within three months, give us a chance to make the QDRO right, and we'll give a full refund if the QDRO can't be fixed.
  
   % if (plan_sponsor.address.address != '' and plan_sponsor.address.city != '' and plan_sponsor.address.state != '' and plan_sponsor.address.zip != ''):
   % if CheckboX:
    *Since you asked us to mail your documents to the plan admin and/or sponsor, an additional charge of $9.99 per mailing for postage and handling is included in your total.*
   % endif
   % endif
   
post: |
  Can't afford the fee? Though we charge less than any other QDRO website out there, we've got your back. Please reach out to us via the contact form on [(http://lexyalgo.com/)](${ url_of('https://Lexyalgo.com/') }){:target="_blank"}.
field: check1
buttons:
  - Pay: False
  - Coupon: True
  
  
---
ga id: TRS_payment_page
event: payment.demand
question: |
  Payment
subquestion: |
  ${ payment.html }
script: |
  ${ payment.javascript }

---
code: |
  interview_id = retrieve_interview_id()

---
ga id: TRS_CheckboX_to_mail
question:
  Do you want us to send your documents to plan administrator, If yes please confirm it by checking the checkbox.
fields:
  - note: Please check the box, if you want us to send it to plan administrator.
  - Check here: CheckboX
    datatype: yesno

---
ga id: TRS_coupon_page
field: coupon_page
question: |
  Enter coupon code? 
fields:
  - Coupon code: coupon_code
validation code: |
  if not check_coupon(coupon_code, retrieve_interview_id()) == True:
    validation_error('Coupon code is not valid')
  else:
    check_coupon(coupon_code, retrieve_interview_id())
    #yml_variables(retrieve_interview_id(),user_info().filename,url_args)
    check_cookie_value(get_cookies())  
    if CheckboX:
      delete_return_id = delete_return_addresses()
      if data_from_registration and len(data_from_registration) > 0:
        return_address = clicksend_post_return_adress(data_from_registration[0])
        return_address_id = return_address['data']['return_address_id']
        clicksend_send_post_letter("Teachers' Retirement System of the City of New York",plan_sponsor.address.address,plan_sponsor.address.city,plan_sponsor.address.state,plan_sponsor.address.zip,return_address,urls)
---
event: payment.success
code: |
  payment.process()
  #log(interview_id, "info")
  if update_payment_status(interview_id):
    #yml_variables(retrieve_interview_id(),user_info().filename,url_args)
    check_cookie_value(get_cookies())  
    if CheckboX:
      delete_return_id = delete_return_addresses()
      if data_from_registration and len(data_from_registration) > 0:
        return_address = clicksend_post_return_adress(data_from_registration[0])
        return_address_id = return_address['data']['return_address_id']
        clicksend_send_post_letter("Teachers' Retirement System of the City of New York",plan_sponsor.address.address,plan_sponsor.address.city,plan_sponsor.address.state,plan_sponsor.address.zip,return_address,urls)
---
progress: 100
ga id: TRS_final_page
event: final_shown
question: |
  Download document for **${ document }** and **Addendum** attached below. ${ user_data } ${ delete_button_info(qdro_intake_data_details[0]['id']) }
subquestion: |
  Click on the ‘Restart’ button to start a new interview.
action buttons:
  - label: Restart
    action: restart_interview
    color: warning
  - label: Dashboard
    action: 'https://doc.lexyalgo.com/interview?i=docassemble.playground3QDRO:dashboard.yml'
    color: link
    
attachment code: |  
  [final_document]

---
if: pick_plan == "TRS"
attachment:
  name: ${ document } TRS
  variable name: final_document
  docx template file: TRS_combined.docx
  valid formats:
    - pdf
    - docx
always include editable files: True
---

if: (document == "California" or document == "Arizona" or document == "District of Columbia" or document == "Nevada" or document == "New Mexico" or document == "Oregon" or document == "Washington" )and pick_plan == "TRS"
attachment:
  name: ${ document } TRS
  variable name: final_document
  docx template file: trs_cal.docx
  valid formats:
    - pdf
    - docx
always include editable files: True
---

event: restart_interview
code: |
  command('restart')
---
code: |
  interview_id = retrieve_interview_id()
---
progress: 100
ga id: TRS_preview_page
question: |
  **Preview** Your TRS Documents Before You Pay. ${ user_data } ${ delete_button_info(qdro_intake_data_details[0]['id']) }   
  
subquestion: |
  We've created these watermarked preview drafts for you to review before you pay. If needed, you can use the "Back" button to edit your answers or you can click the "Restart" button to start from scratch.
  
  After you pay, you’ll receive both PDF and editable versions of your documents, without the watermarks.
continue button field: draft_shown
action buttons:
  - label: Restart
    action: restart_interview
    color: warning
attachment code: |
  [the_document]
allow emailing: False


---
if: pick_plan == "TRS"
attachment:
  name: ${ document } TRS
  variable name: the_document
  docx template file: draft_TRS_combined.docx
  valid formats:
    - pdf
---
if: (document == "California" or document == "Arizona" or document == "District of Columbia" or document == "Nevada" or document == "New Mexico" or document == "Oregon" or document == "Washington" )and pick_plan == "TRS"
attachment:
  name: ${ document } TRS
  variable name: the_document
  docx template file: draft_trs_cal.docx
  valid formats:
    - pdf
