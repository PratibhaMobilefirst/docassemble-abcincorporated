metadata: 
  title: |
    Dashboard
  short title: |
    Thanks
  show login: False
  allow registration: False
  exit url: "http://lexyalgo.com/"
  exit link: exit
  exit label: |
    Exit

---
metadata:
  temporary session: True
  hidden: True
---
features:
  javascript: my-functions.js
  css: buttons.css
---
modules:
  - .read_data
  
---
objects:
  - company_logo: DAStaticFile.using(filename='logo.png')
---
mandatory: True
code: |
  set_parts(logo='<img src="' + company_logo.url_for() + '" style="height: 50px;">')
---
initial: True
code: |
  if not user_logged_in():
    command('leave', url='https://doc.lexyalgo.com/interview?i=docassemble.playground3QDRO:signIn_signUp.yml') 
---

mandatory: True
code: |
  current_page = 0
  next_id_of_page = [None]
  de = []
  file=[]
---
reconsider: True
code: |
  menu_items = [ {'url': 'https://doc.lexyalgo.com/interview?i=docassemble.playground3QDRO:edit_profile.yml', 'label': 'Edit Profile'},{'url': url_of('change_password'), 'label': 'Change password'} ]
  dashData = dash()
  current_info = user_info()
  list_of_interviews1 = len(dashData)
  list_of_interviews = []
  (items, next_id) = interview_list(next_id=next_id_of_page[current_page])
  if len(next_id_of_page) == current_page + 1 and next_id is not None:
    next_id_of_page.append(next_id)
  del next_id
  for info in items:
    if not info['metadata'].get('hidden', False):
      list_of_interviews.append(info)
    del info
  if len(list_of_interviews) > 0:
    list_of_interviews += [dict()]
  set_save_status('overwrite')
---
code: |
  if row_item['title'] == 'Sign in button' or row_item['title'] == 'Registration Page':
    row_item = ''
---
table css class: table table-striped
mandatory: True
question: |
  Resume an interview <select id="dropdown">
      <option value="">Create New Document</option>
      <option value="https://doc.lexyalgo.com/interview?i=docassemble.playground3QDRO:qdro.yml&new_session=1">QDRO</option>
      <option value="https://doc.lexyalgo.com/interview?i=docassemble.playground3QDRO:joinder_generator.yml&new_session=1">Joinder</option>
  </select>
subquestion: |
  % if len(dashData) > 0:
  Click on edit button to edit an interview.
  ${ int_table }
  % else:
  You do not have any sessions.
  % endif

  % if current_page > 0:
  ${ action_button_html(url_action('change_page', direction=-1), label="Prev", icon='chevron-left', size='md', color='secondary') }
  % endif
  % if current_page + 1 < len(next_id_of_page):
  ${ action_button_html(url_action('change_page', direction=1), label="Next", icon='chevron-right', size='md', color='secondary') }
  % endif
script: |
  <script>
     var dropdown = document.getElementById("dropdown");

      // Redirect to the selected option's link when an option is selected
      dropdown.addEventListener("change", function () {
        dropdown.style.borderColor = "#fff";
        var selectedOption = dropdown.options[dropdown.selectedIndex];
        if (selectedOption.value !== "") {
          window.open(selectedOption.value, "_blank");
        }
      });
      
      var daquestionElement = document.getElementById('daquestion');

    // Remove all existing classes from the element
    daquestionElement.className = '';

    // Add the desired class to the element
    daquestionElement.classList.add('tab-pane', 'fade', 'show', 'active', 'col-lg-12');
  </script>
---
table: int_table
rows: dashData
hidden rows: list_of_interviews
columns:
  - Case Name: |
      '<b  class="title">' + str(row_item['data']['petitioner_field']['petitioner.name.first'] + ' ' + row_item['data']['petitioner_field']['petitioner.name.middle'] + ' ' + row_item['data']['petitioner_field']['petitioner.name.last'] + ' vs. ' + row_item['data']['respondent_field']['respondent.name.first']+ ' ' + row_item['data']['respondent_field']['respondent.name.middle'] + ' ' + row_item['data']['respondent_field']['respondent.name.last']) + '</b>'
  - Filename: |
      'QDRO' if (row_item['filename']== 'docassemble.playground3QDRO:qdro.yml' or row_item['filename']== 'docassemble.playground3QDRO:qdro.yml') else 'Joinder'
  - Plan Name: |
      row_item['data']['other_plan'] if row_item['data']['add_other_plan'] else row_item['data']['plan_name']
  - Creation Date: |
      row_item['modified_date'].date()
  - Edit: |
      action_button_html(url_action('edit_ev',id=row_item['id']),  label="Edit", color='warning', new_window = True)
  - Reuse: |
      action_button_html(url_action('reuse_ev',id=row_item['id']),  label="Reuse", color='warning', new_window = True)
  - Delete: |
      action_button_html(url_action('delete_ev',id=row_item['id']), label="Delete", color='warning')
---
code: |
  if 'id' in url_args:
    origin_of_interviewee = url_args['id']
  else:
    origin_of_interviewee = 'unknown'
---
event: change_page
code: |
  current_page += int(action_argument('direction'))
---
event: delete_ev
code: |
  de = delete_data(str(action_argument('id')))
  log(de, "success")
---
mandatory: True
event: reuse_ev
code: |
  file = file_name(action_argument('id'))
  type_of_interview = 'reuse'
  de = add_interview_type(action_argument('id'), file, type_of_interview)
  command('leave',url='https://doc.lexyalgo.com/interview?i=docassemble.playground3QDRO:which_doc.yml&new_session=1')
---
event: edit_ev
code: |
  file=file_name(action_argument('id'))
  de=edit_interview_type(action_argument('id'),file)
---
event: delete
code: |
  if interview_list(
      action='delete',
      filename=action_argument('filename'),
      session=action_argument('session')):
    log("Deleted interview", "success")
---
event: delete_all
code: |
  interview_list(action='delete_all')
  log("Deleted interviews", "success")
